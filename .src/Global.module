' Gambas module file

Public DB_Filename As String
Public DBConn As New Connection
Public Product_Id As Integer


Public Sub OpenDb()

  DBconn.Type = "sqlite3"
  DBconn.Host = File.Dir(DB_Filename)
  DBconn.Name = File.Name(DB_Filename)
  DBconn.Open()
  Message.Info("Database Open " & DBConn.Opened, "OK")
  
End

Public Function Find_Product(Barcode As String) As Result
  
  Dim res As Result
  Dim cat As Result 
  Dim brand As Result
  
  res = Global.DBconn.Find("products", "barcode = &1", Barcode)
  If res.Available
  cat = Global.DBconn.Find("types", "id = &1", res!category)
  brand = Global.DBconn.Find("brands", "id = &1", res!brand)
  Print res
  Print cat
  Print brand
  'If cat.Available Then ComboBox1.Text = cat!item
  'ComboBox2.Text = brand!item
  'If brand.Available Then ComboBox2.Index = ComboBox2.List.Find(brand!item)
  
  ' TextBox1.Text = res!partnum
  ' TextArea1.Text = res!description
  ' TextBox2.Text = res!price
  ' TextBox3.text = res!barcode
  ' 
  ' If res!markup <> Null Then SliderBox1.Value = res!markup
  ' If res!image <> Null Then
  '   PictureBox1.Picture = Global.Scale_Picture(Global.Load_Picture_Blob(res!image), PictureBox1.Width, PictureBox1.Height, True)
  ' Endif
  
  Endif 
  Return res
End

Public Function Scale_Picture(p As Picture, width As Integer, height As Integer, aspect As Boolean) As Picture
  
  Dim img As Picture
  Dim newImg As New Image
  Dim ratioX As Float
  Dim ratioY As Float
  Dim ratio As Float
  Dim newWidth As Integer
  Dim newHeight As Integer
  
    
  ratioX = width / p.Width
  ratioY = height / p.Height
  
  If ratioX < ratioY 
   ratio = ratioX
  Else
    ratio = ratioY
  Endif
  newWidth = p.Width * ratio
  newHeight = p.Height * ratio
  'newimg = New Image(newWidth, newHeight)
  If aspect
    newImg = p.Image.Stretch(newWidth, newHeight)
  Else
    newImg = p.Image.Stretch(width, height)
  Endif
  
  Return newImg.Picture
  Catch
End

Public Function Load_Picture_Blob(res As String) As Picture
  Dim p As Picture
  If Len(res) <> 0 Then
    p = Picture.FromString(res)
  Endif
  Return p
End 


Public Sub ReadCSV()
  
  Dim hFile As File
  Dim sLine As String
  Dim aFields As String[]
  Dim rowIndex As Integer

  ' Clear the GridView before populating it
  'GridView1.Clear()

  ' Open the CSV file for reading
  ' Open the CSV file for reading
  Try hFile = Open "/home/shane/Downloads/Stock.csv" For Read
  
  If Error Then
    Print "Error opening file."
    Return
  Endif

  ' Read the first line (header) to set up column headers
  If Not Eof(hFile) Then
    Line Input #hFile, sLine
    aFields = Split(sLine, ",")

    ' Set up columns based on the headers
    ' GridView1.Columns.Count = aFields.Max + 1
    ' GridView1.Columns[0].Width = 130
    ' GridView1.Columns[1].width = 200
    ' GridView1.Columns[2].width = 450
    ' GridView1.Columns[3].width = 75
    ' GridView1.Columns[4].width = 150
    ' GridView1.Columns[5].width = 50
    ' 
    For i As Integer = 0 To aFields.Max
      'GridView1.Columns[i].Title = UnQuote(aFields[i]) ' Set column headers
      Print aFields[i]
    Next
  Endif

  ' Initialize the row index for the actual data
  rowIndex = 0

  ' Read the remaining lines (data rows)
  While Not Eof(hFile)
    Line Input #hFile, sLine
    aFields = Split(sLine, ",")

    ' Set number of rows dynamically
    'GridView1.Rows.Count = rowIndex + 1

    ' Populate each cell in the current row
    For i As Integer = 0 To aFields.Max
       'GridView1[res.Index, 1].Text = product!partnum
       'GridView1[res.Index, 2].Text = product!description
      
      'GridView1[rowIndex, i].Text = UnQuote(aFields[i]) ' Set cell text
      Print aFields[i]
      
    Next

    ' Increment row index
    rowIndex += 1
  Wend

  ' Close the file after reading
  Close hFile

  
End
